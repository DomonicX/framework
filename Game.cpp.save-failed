#include "Game.h"

#include <TextureManager.h>
#include <GameObjectFactory.h>
#include <MenuState.h>
#include <TowerObject.h>
Game *Game::s_pInstance = 0;

Game::Game(): m_pWindow(0),
    m_pRenderer(0),
    m_bRunning(0),
    m_pGameStateMachine(0),
    m_blevelComplete(false),
    m_bChangingState(false)
{
    m_currentLevel = 1;
}
Game::~Game() {}



void Game::Render()
{

    SDL_RenderClear(m_pRenderer);
    //  SDL_SetRenderDrawColor(m_pRenderer,120,120,120,255);


    SDL_SetRenderDrawColor(m_pRenderer,255,255,255,255);
    m_pGameStateMachine->Render();


    SDL_SetRenderDrawColor(m_pRenderer,255,255,255,0);





    m_Centre = m_Screen-m_Origin;

m_Centre.Normalise();
m_Centre*=m_Screen.Length()/2;

//vec2f A = vec2f(0*16,1*16) += m_Centre;
vec2f A = vec2f(0*16,1*16)  ;

//
//  SDL_RenderDrawLineF(Game::Instance()->GetRenderer(),
//                       m_Origin.x,
//                m_Origin.y,B.x,B.y);

//SDL_RenderDrawPointF(Game::Instance()->GetRenderer(),
//                        m_Centre.x,
//                        m_Centre.y);
SDL_RenderDrawPointF(Game::Instance()->GetRenderer(),
                        A.x+m_Centre.x,
                        A.y+m_Centre.y);


//    SDL_RenderDrawLineF(Game::Instance()->GetRenderer(),
//                       m_Centre.x ,
//                       m_Centre.y, A.x ,A.y);


   std::cout << "m_Origin Length " <<  m_Origin.Length()<< "  \n " ;
    std::cout << "m_Centre Length " <<  m_Centre.Length()<< "  \n " ;
   std::cout << "m_Screen Length " <<  m_Screen.Length()<< "  \n " ;
   std::cout << "m_Screen Length " <<  A.Length()<< "  \n " ;

//   SDL_RenderDrawLine(Game::Instance()->GetRenderer(),d.x,d.y,A.x, A.y);

    SDL_SetRenderDrawColor(m_pRenderer,0,0,0,0);
    SDL_RenderPresent(m_pRenderer);


}

void Game::Clean() {}

int Game::getRandomNumber()
{

    return rand()%100;

}

bool Game::Init(const char* title, int xpos, int ypos, int width, int height, bool fullscreen)
{

    int flags = 0;

    // store the game width and height
    m_gameWidth = width;
    m_gameHeight = height;
    m_Origin = vec2f(0,0);
    m_Screen = vec2f(width,height);
    m_Centre = vec2f(m_Screen.Length()/2,m_Screen.Length()/2);

    m_pCamera = {0,0,width,height};
    if(fullscreen)
    {
        flags = SDL_WINDOW_FULLSCREEN;
    }

    // attempt to initialise SDL
    if(SDL_Init(SDL_INIT_EVERYTHING) == 0)
    {
        TTF_Init();
        std::cout << "SDL init success\n";
        // init the window
        m_pWindow = SDL_CreateWindow(title, xpos, ypos, width, height, flags);

        if(m_pWindow != 0) // window init success
        {
            std::cout << "window creation success\n";
            m_pRenderer = SDL_CreateRenderer(m_pWindow, -1, SDL_RENDERER_ACCELERATED);

            if(m_pRenderer != 0) // renderer init success
            {
                std::cout << "renderer creation success\n";
                SDL_SetRenderDrawColor(m_pRenderer, 0,0,0,255);
            }
            else
            {
                std::cout << "renderer init fail\n";
                return true; // renderer init fail
            }
        }
        else
        {
            std::cout << "window init fail\n";
            return true; // window init fail
        }
    }
    else
    {
        std::cout << "SDL init fail\n";
        return true; // SDL init fail
    }
    // TextureManager::Instance()->Load("SpaceinvaderAssist/SpaceInvaders1.PNG","SpaceInvader",Game::GetRenderer());
    // GameObjectFactory::Instance()->registerType("SpaceEnemy1",new EnemySpaceShipCreator());

    // GameObjectFactory::Instance()->registerType("Eskeletor",g EskeletorCreater());

//UI_Selection = NULL;

    /*
    sdsd

     Map[Player][p]

    Widget_TowersSelection

     */
    TextureManager::Instance()->Load("Img/Pannel_Window.PNG","Pannel_Window",Game::GetRenderer());
    TextureManager::Instance()->Load("Img/Pannel_Top.PNG","Pannel_Top",Game::GetRenderer());
    TextureManager::Instance()->Load("Img/Pannel_Right.PNG","Pannel_Right",Game::GetRenderer());
    TextureManager::Instance()->Load("Img/Pannel_Grid.PNG","Pannel_Grid",Game::GetRenderer());
    TextureManager::Instance()->Load("Img/Towers/Towers.PNG","Towers",Game::GetRenderer());
    TextureManager::Instance()->Load("Img/Cell_ExitRed.PNG","Cell_ExitRed",Game::GetRenderer());
    TextureManager::Instance()->Load("Img/Cell_EnterGreen.PNG","Cell_EnterGreen",Game::GetRenderer());
    TextureManager::Instance()->Load("Img/Cell_Empty.PNG","Cell_Empty",Game::GetRenderer());
    TextureManager::Instance()->Load("Img/Buttons_Game.PNG","Buttons_Game",Game::GetRenderer());
    TextureManager::Instance()->Load("Img/Buttons_Setting.PNG","Buttons_Setting",Game::GetRenderer());
    TextureManager::Instance()->Load("Img/Widget_Wave.PNG","Widget_Wave",Game::GetRenderer());
    TextureManager::Instance()->Load("Img/Widget_TowerInfo.PNG","Widget_TowerInfo",Game::GetRenderer());
    TextureManager::Instance()->Load("Img/GUI/BoarderMask.PNG","BoarderMasks",Game::GetRenderer());
    TextureManager::Instance()->Load("Img/GUI/Widget_TowerSelection.PNG","Widget_TowerSelection",Game::GetRenderer());
    TextureManager::Instance()->Load("Img/Cell.PNG","Cell",Game::GetRenderer());

    GameObjectFactory::Instance()->registerType("Cell",new TowerObjectCreater());
    GameObjectFactory::Instance()->registerType("Towers",new TowerObjectCreater());
//
//    GameObjectFactory::Instance()->registerType("Bonus01",new TowerObjectCreater());
//    GameObjectFactory::Instance()->registerType("Bonus02",new TowerObjectCreater());
//    GameObjectFactory::Instance()->registerType("Bonus03",new TowerObjectCreater());
//    GameObjectFactory::Instance()->registerType("Bonus04",new TowerObjectCreater());


    m_pGameStateMachine  = new GameStateMachine();
    m_pGameStateMachine->ChangeState(new MenuState());
//  m_pGameStateMachine->ChangeState(new StateLevel());
    //StateLevel
//m_pGameStateMachine->PushState(new StateLevel());
//   m_pGameStateMachine->ChangeState(new StateMapEditer());

    return false;
}







SDL_Texture* RenderText(const std::string &message, const std::string &fontFlie, SDL_Color color, int fontSize, SDL_Renderer *render)
{
    TTF_Font *font = TTF_OpenFont(fontFlie.c_str(),fontSize);
    if(font==nullptr)
    {
        std::cout << " 1 error \n";
        return nullptr;
    }

    SDL_Surface *surf = TTF_RenderText_Blended(font,message.c_str(),color);
    if(surf==nullptr)
    {
        TTF_CloseFont(font);
        std::cout << " 2 error \n";
        return nullptr;
    }

    SDL_Texture *texture = SDL_CreateTextureFromSurface(render,surf);
    if(texture==nullptr)
    {
        std::cout << " 3 error \n";
    }
    srand (time(NULL));

    SDL_FreeSurface(surf);
    TTF_CloseFont(font);
    return texture;


}


